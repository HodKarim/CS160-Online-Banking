// prisma/test_schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "sqlite"
  url       = "file:./test.db"
}

model User {
  id                 Int              @id @default(autoincrement())
  username           String           @unique
  auth_user_id       String           @unique
  created_at         DateTime         @default(now())
  first_name         String
  last_name          String
  email              String           @unique
  phone_number       String           @unique
  street_address     String
  address_line_2     String?
  city               String
  state_or_territory USStateTerritory
  postal_code        String
  country            String           @default("United States")
  role               RoleEnum

  internal_accounts InternalAccount[]
  external_accounts ExternalAccount[]
  transfer_rules    TransferRule[]
  billpay_rules     BillPayRule[]
}

enum RoleEnum {
  customer
  bank_manager
}

enum USStateTerritory {
  CA
  NY
  TX
  FL
  // ...add more as needed for tests
}

model InternalAccount {
  id             Int             @id @default(autoincrement())
  account_number String          @unique
  routing_number String          @default("724722907")
  user_id        Int
  created_at     DateTime        @default(now())
  account_type   AccountTypeEnum
  is_active      Boolean         @default(true)
  balance        Decimal         @default(0)

  user User @relation(fields: [user_id], references: [id])

  transactions        Transaction[]
}

enum AccountTypeEnum {
  savings
  checking
}

model Transaction {
  id               Int                   @id @default(autoincrement())
  created_at       DateTime              @default(now())
  updated_at       DateTime              @updatedAt
  amount           Decimal
  status           TransactionStatusEnum
  transaction_type TransactionTypeEnum

  internal_account_id Int
  internal_account    InternalAccount @relation(fields: [internal_account_id], references: [id], onDelete: Cascade)

  direction PaymentDirection

  idempotency_key  String?       @unique

  transfer_rule_id Int?
  bill_pay_rule_id Int?
}

enum TransactionStatusEnum {
  approved
  denied
}

enum TransactionTypeEnum {
  internal_transfer
  external_transfer
  billpay
  deposit
  withdrawal
}

enum PaymentDirection {
  outbound
  inbound
}

model TransferRule {
  id            Int              @id @default(autoincrement())
  user_id       Int
  direction     PaymentDirection
  amount        Decimal

  source_internal_id      Int

  user                 User             @relation(fields: [user_id], references: [id])
  source_internal      InternalAccount  @relation(fields: [source_internal_id], references: [id])
}

model BillPayRule {
  id                 Int       @id @default(autoincrement())
  user_id            Int
  source_internal_id Int
  payee_id           Int
  amount             Decimal

  user            User            @relation(fields: [user_id], references: [id])
  source_internal InternalAccount @relation(fields: [source_internal_id], references: [id])
  payee           BillPayPayee    @relation(fields: [payee_id], references: [id])
}

model BillPayPayee {
  id                 Int              @id @default(autoincrement())
  business_name      String
  email              String
  phone              String
  street_address     String
  city               String
  state_or_territory USStateTerritory
  postal_code        String
  country            String           @default("United States")
  account_number     String
  routing_number     String
  is_active          Boolean          @default(true)
}